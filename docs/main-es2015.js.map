{"version":3,"sources":["./src/environments/environment.ts","./dist/angular-rave/fesm2015/angular-rave.js","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,gFAAgF;AAChF,2EAA2E;AAC3E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;GAKG;AACH,mEAAmE;;;;;;;;;;;;;ACdnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2V;AACzT;AACa;;AAE/C,4BAA4B,4DAAc;AAC1C,8BAA8B,4DAAc;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,sCAAsC,8DAAQ,mBAAmB,8DAAQ,qBAAqB;AAChK,2BAA2B,wEAAkB,EAAE,kFAAkF;AACjI,4BAA4B,CAAC,uEAAiB;AAC9C,cAAc,wDAAU;AACxB;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,UAAU;AAC/B,sBAAsB,oDAAM;AAC5B;AACA,aAAa,GAAG,GAAG;AACnB,sBAAsB,oDAAM;AAC5B;AACA,aAAa,GAAG,EAAE,EAAE,QAAQ,EAAE;;AAE9B;AACA;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC,4BAA4B,0DAAY;AACxC,wBAAwB,0DAAY;AACpC;AACA;AACA;AACA,eAAe,uDAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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","file":"main-es2015.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * In development mode, to ignore zone related error stack frames such as\r\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\r\n * import the following file, but please comment it out in production mode\r\n * because it will have performance impact when throw error\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { InjectionToken, ɵɵinject, ɵɵdefineInjectable, ɵsetClassMetadata, Injectable, Inject, EventEmitter, ɵɵdirectiveInject, ɵɵdefineComponent, ɵɵprojectionDef, ɵɵprojection, Component, Input, Output, ɵɵdefineDirective, ɵɵlistener, Directive, HostListener, ɵɵdefineNgModule, ɵɵdefineInjector, ɵɵsetNgModuleScope, NgModule } from '@angular/core';\nimport { __awaiter } from 'tslib';\nimport { CommonModule } from '@angular/common';\n\nconst PBFPUBKEY_TOKEN = new InjectionToken('Rave.PBFPubKey');\r\nconst ENVIRONMENT_TOKEN = new InjectionToken('Rave.IsDevelopment');\n\nconst PROD_URL = '//api.ravepay.co/flwv3-pug/getpaidx/api/flwpbf-inline.js';\r\nconst DEV_URL = '//ravesandboxapi.flutterwave.com/flwv3-pug/getpaidx/api/flwpbf-inline.js';\r\nclass AngularRaveService {\r\n    constructor(PBFPubKey, isDev) {\r\n        this.PBFPubKey = PBFPubKey;\r\n        this.isDev = isDev;\r\n    }\r\n    createRaveOptionsObject(obj) {\r\n        const raveOptions = {};\r\n        raveOptions.amount = obj.amount;\r\n        // raveOptions.hosted_payment = 1; // Modal should open in another page\r\n        raveOptions.PBFPubKey = obj.PBFPubKey || this.PBFPubKey;\r\n        if (obj.payment_method) {\r\n            raveOptions.payment_method = obj.payment_method;\r\n        }\r\n        if (obj.payment_options) {\r\n            raveOptions.payment_options = obj.payment_options;\r\n        }\r\n        if (obj.redirect_url) {\r\n            raveOptions.redirect_url = obj.redirect_url;\r\n        }\r\n        if (obj.integrity_hash) {\r\n            raveOptions.integrity_hash = obj.integrity_hash;\r\n        }\r\n        if (obj.pay_button_text) {\r\n            raveOptions.pay_button_text = obj.pay_button_text;\r\n        }\r\n        if (obj.country) {\r\n            raveOptions.country = obj.country;\r\n        }\r\n        if (obj.currency) {\r\n            raveOptions.currency = obj.currency;\r\n        }\r\n        if (obj.custom_description) {\r\n            raveOptions.custom_description = obj.custom_description;\r\n        }\r\n        if (obj.customer_email) {\r\n            raveOptions.customer_email = obj.customer_email;\r\n        }\r\n        if (obj.custom_logo) {\r\n            raveOptions.custom_logo = obj.custom_logo;\r\n        }\r\n        if (obj.custom_title) {\r\n            raveOptions.custom_title = obj.custom_title;\r\n        }\r\n        if (obj.customer_firstname) {\r\n            raveOptions.customer_firstname = obj.customer_firstname;\r\n        }\r\n        if (obj.subaccount) {\r\n            raveOptions.subaccount = obj.subaccount;\r\n        }\r\n        if (obj.customer_lastname) {\r\n            raveOptions.customer_lastname = obj.customer_lastname;\r\n        }\r\n        if (obj.txref) {\r\n            raveOptions.txref = obj.txref;\r\n        }\r\n        if (obj.customer_phone) {\r\n            raveOptions.customer_phone = obj.customer_phone;\r\n        }\r\n        return raveOptions;\r\n    }\r\n    loadScript() {\r\n        return new Promise(resolve => {\r\n            if (typeof window.getpaidSetup === 'function') {\r\n                resolve();\r\n                return;\r\n            }\r\n            const script = window.document.createElement('script');\r\n            window.document.head.appendChild(script);\r\n            const onLoadFunc = () => {\r\n                script.removeEventListener('load', onLoadFunc);\r\n                resolve();\r\n            };\r\n            script.addEventListener('load', onLoadFunc);\r\n            const url = this.isDev ? DEV_URL : PROD_URL;\r\n            script.setAttribute('src', url);\r\n        });\r\n    }\r\n    isInvalidOptions(obj) {\r\n        if (!obj.PBFPubKey && !this.PBFPubKey) {\r\n            return 'ANGULAR-RAVE: Merchant public key is required';\r\n        }\r\n        if (!(obj.customer_email || obj.customer_phone)) {\r\n            return 'ANGULAR-RAVE: Customer email or phone number is required';\r\n        }\r\n        if (!obj.txref) {\r\n            return 'ANGULAR-RAVE: A unique transaction reference is required';\r\n        }\r\n        if (!obj.currency) {\r\n            return 'ANGULAR-RAVE: Currency is required, Use \"NGN\" for naira';\r\n        }\r\n        if (!obj.amount) {\r\n            return 'ANGULAR-RAVE: Amount to charge is required';\r\n        }\r\n        return '';\r\n    }\r\n}\r\nAngularRaveService.ɵfac = function AngularRaveService_Factory(t) { return new (t || AngularRaveService)(ɵɵinject(PBFPUBKEY_TOKEN), ɵɵinject(ENVIRONMENT_TOKEN)); };\r\nAngularRaveService.ɵprov = ɵɵdefineInjectable({ token: AngularRaveService, factory: AngularRaveService.ɵfac, providedIn: 'root' });\r\n/*@__PURE__*/ (function () { ɵsetClassMetadata(AngularRaveService, [{\r\n        type: Injectable,\r\n        args: [{\r\n                providedIn: 'root',\r\n            }]\r\n    }], function () { return [{ type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [PBFPUBKEY_TOKEN]\r\n            }] }, { type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [ENVIRONMENT_TOKEN]\r\n            }] }]; }, null); })();\n\nconst _c0 = [\"*\"];\r\nclass AngularRaveComponent {\r\n    constructor(raveService) {\r\n        this.raveService = raveService;\r\n        this.onclose = new EventEmitter();\r\n        this.callback = new EventEmitter();\r\n        this.init = new EventEmitter();\r\n        this._raveOptions = {};\r\n    }\r\n    pay() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let errorExists = false;\r\n            if (this.raveOptions && Object.keys(this.raveOptions).length > 1) {\r\n                errorExists = this.checkInvalidOptions(this.raveOptions);\r\n                this.insertRaveOptions(this.raveOptions);\r\n            }\r\n            else {\r\n                errorExists = this.checkInvalidOptions(this);\r\n                this.insertRaveOptions(this);\r\n            }\r\n            if (errorExists) {\r\n                return;\r\n            }\r\n            yield this.raveService.loadScript();\r\n            this.paymentSetup = window.getpaidSetup(this._raveOptions);\r\n            if (this.init.observers.length > 0) {\r\n                this.init.emit(this.paymentSetup);\r\n            }\r\n        });\r\n    }\r\n    checkInvalidOptions(object) {\r\n        const optionsInvalid = this.raveService.isInvalidOptions(object);\r\n        if (optionsInvalid) {\r\n            console.error(optionsInvalid);\r\n        }\r\n        return optionsInvalid !== '';\r\n    }\r\n    insertRaveOptions(object) {\r\n        this._raveOptions = this.raveService.createRaveOptionsObject(object);\r\n        if (this.onclose) {\r\n            this._raveOptions.onclose = () => this.onclose.emit();\r\n        }\r\n        this._raveOptions.callback = (res) => {\r\n            this.onclose.emit(res);\r\n            if (this.autoClose) {\r\n                this.paymentSetup.close();\r\n            }\r\n        };\r\n    }\r\n    ngOnInit() {\r\n        this.pay();\r\n    }\r\n}\r\nAngularRaveComponent.ɵfac = function AngularRaveComponent_Factory(t) { return new (t || AngularRaveComponent)(ɵɵdirectiveInject(AngularRaveService)); };\r\nAngularRaveComponent.ɵcmp = ɵɵdefineComponent({ type: AngularRaveComponent, selectors: [[\"angular-rave\"]], inputs: { amount: \"amount\", autoClose: \"autoClose\", country: \"country\", currency: \"currency\", custom_description: \"custom_description\", custom_logo: \"custom_logo\", custom_title: \"custom_title\", customer_email: \"customer_email\", customer_firstname: \"customer_firstname\", customer_lastname: \"customer_lastname\", customer_phone: \"customer_phone\", integrity_hash: \"integrity_hash\", meta: \"meta\", pay_button_text: \"pay_button_text\", payment_method: \"payment_method\", payment_options: \"payment_options\", PBFPubKey: \"PBFPubKey\", raveOptions: \"raveOptions\", redirect_url: \"redirect_url\", subaccount: \"subaccount\", txref: \"txref\" }, outputs: { onclose: \"onclose\", callback: \"callback\", init: \"init\" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function AngularRaveComponent_Template(rf, ctx) { if (rf & 1) {\r\n        ɵɵprojectionDef();\r\n        ɵɵprojection(0);\r\n    } }, encapsulation: 2 });\r\n/*@__PURE__*/ (function () { ɵsetClassMetadata(AngularRaveComponent, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: 'angular-rave',\r\n                template: `<ng-content></ng-content>`\r\n            }]\r\n    }], function () { return [{ type: AngularRaveService }]; }, { amount: [{\r\n            type: Input\r\n        }], autoClose: [{\r\n            type: Input\r\n        }], country: [{\r\n            type: Input\r\n        }], currency: [{\r\n            type: Input\r\n        }], custom_description: [{\r\n            type: Input\r\n        }], custom_logo: [{\r\n            type: Input\r\n        }], custom_title: [{\r\n            type: Input\r\n        }], customer_email: [{\r\n            type: Input\r\n        }], customer_firstname: [{\r\n            type: Input\r\n        }], customer_lastname: [{\r\n            type: Input\r\n        }], customer_phone: [{\r\n            type: Input\r\n        }], integrity_hash: [{\r\n            type: Input\r\n        }], meta: [{\r\n            type: Input\r\n        }], pay_button_text: [{\r\n            type: Input\r\n        }], payment_method: [{\r\n            type: Input\r\n        }], payment_options: [{\r\n            type: Input\r\n        }], PBFPubKey: [{\r\n            type: Input\r\n        }], raveOptions: [{\r\n            type: Input\r\n        }], redirect_url: [{\r\n            type: Input\r\n        }], subaccount: [{\r\n            type: Input\r\n        }], txref: [{\r\n            type: Input\r\n        }], onclose: [{\r\n            type: Output\r\n        }], callback: [{\r\n            type: Output\r\n        }], init: [{\r\n            type: Output\r\n        }] }); })();\n\nclass AngularRaveDirective {\r\n    constructor(raveService) {\r\n        this.raveService = raveService;\r\n        this.raveOptions = {};\r\n        this.onclose = new EventEmitter();\r\n        this.callback = new EventEmitter();\r\n        this.init = new EventEmitter();\r\n        this._raveOptions = {};\r\n    }\r\n    buttonClick() {\r\n        this.pay();\r\n    }\r\n    pay() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let errorExists = false;\r\n            if (this.raveOptions && Object.keys(this.raveOptions).length > 1) {\r\n                errorExists = this.checkInvalidOptions(this.raveOptions);\r\n                this.insertRaveOptions(this.raveOptions);\r\n            }\r\n            else {\r\n                errorExists = this.checkInvalidOptions(this);\r\n                this.insertRaveOptions(this);\r\n            }\r\n            if (errorExists) {\r\n                return;\r\n            }\r\n            yield this.raveService.loadScript();\r\n            this.paymentSetup = window.getpaidSetup(this._raveOptions);\r\n            if (this.init.observers.length > 0) {\r\n                this.init.emit(this.paymentSetup);\r\n            }\r\n        });\r\n    }\r\n    checkInvalidOptions(object) {\r\n        const optionsInvalid = this.raveService.isInvalidOptions(object);\r\n        if (optionsInvalid) {\r\n            console.error(optionsInvalid);\r\n        }\r\n        return optionsInvalid !== '';\r\n    }\r\n    insertRaveOptions(object) {\r\n        this._raveOptions = this.raveService.createRaveOptionsObject(object);\r\n        if (this.onclose) {\r\n            this._raveOptions.onclose = () => this.onclose.emit();\r\n        }\r\n        this._raveOptions.callback = (res) => {\r\n            this.onclose.emit(res);\r\n            if (this.autoClose) {\r\n                this.paymentSetup.close();\r\n            }\r\n        };\r\n    }\r\n}\r\nAngularRaveDirective.ɵfac = function AngularRaveDirective_Factory(t) { return new (t || AngularRaveDirective)(ɵɵdirectiveInject(AngularRaveService)); };\r\nAngularRaveDirective.ɵdir = ɵɵdefineDirective({ type: AngularRaveDirective, selectors: [[\"\", \"angular-rave\", \"\"]], hostBindings: function AngularRaveDirective_HostBindings(rf, ctx) { if (rf & 1) {\r\n        ɵɵlistener(\"click\", function AngularRaveDirective_click_HostBindingHandler() { return ctx.buttonClick(); });\r\n    } }, inputs: { amount: \"amount\", autoClose: \"autoClose\", country: \"country\", currency: \"currency\", custom_description: \"custom_description\", custom_logo: \"custom_logo\", custom_title: \"custom_title\", customer_email: \"customer_email\", customer_firstname: \"customer_firstname\", customer_lastname: \"customer_lastname\", customer_phone: \"customer_phone\", integrity_hash: \"integrity_hash\", meta: \"meta\", pay_button_text: \"pay_button_text\", payment_method: \"payment_method\", payment_options: \"payment_options\", PBFPubKey: \"PBFPubKey\", raveOptions: \"raveOptions\", redirect_url: \"redirect_url\", subaccount: \"subaccount\", txref: \"txref\" }, outputs: { onclose: \"onclose\", callback: \"callback\", init: \"init\" } });\r\n/*@__PURE__*/ (function () { ɵsetClassMetadata(AngularRaveDirective, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: '[angular-rave]',\r\n            }]\r\n    }], function () { return [{ type: AngularRaveService }]; }, { amount: [{\r\n            type: Input\r\n        }], autoClose: [{\r\n            type: Input\r\n        }], country: [{\r\n            type: Input\r\n        }], currency: [{\r\n            type: Input\r\n        }], custom_description: [{\r\n            type: Input\r\n        }], custom_logo: [{\r\n            type: Input\r\n        }], custom_title: [{\r\n            type: Input\r\n        }], customer_email: [{\r\n            type: Input\r\n        }], customer_firstname: [{\r\n            type: Input\r\n        }], customer_lastname: [{\r\n            type: Input\r\n        }], customer_phone: [{\r\n            type: Input\r\n        }], integrity_hash: [{\r\n            type: Input\r\n        }], meta: [{\r\n            type: Input\r\n        }], pay_button_text: [{\r\n            type: Input\r\n        }], payment_method: [{\r\n            type: Input\r\n        }], payment_options: [{\r\n            type: Input\r\n        }], PBFPubKey: [{\r\n            type: Input\r\n        }], raveOptions: [{\r\n            type: Input\r\n        }], redirect_url: [{\r\n            type: Input\r\n        }], subaccount: [{\r\n            type: Input\r\n        }], txref: [{\r\n            type: Input\r\n        }], onclose: [{\r\n            type: Output\r\n        }], callback: [{\r\n            type: Output\r\n        }], init: [{\r\n            type: Output\r\n        }], buttonClick: [{\r\n            type: HostListener,\r\n            args: ['click']\r\n        }] }); })();\n\nclass AngularRaveModule {\r\n    static forRoot(options) {\r\n        return {\r\n            ngModule: AngularRaveModule,\r\n            providers: [\r\n                AngularRaveService,\r\n                { provide: PBFPUBKEY_TOKEN, useValue: options.key },\r\n                { provide: ENVIRONMENT_TOKEN, useValue: options.isTest }\r\n            ]\r\n        };\r\n    }\r\n}\r\nAngularRaveModule.ɵmod = ɵɵdefineNgModule({ type: AngularRaveModule });\r\nAngularRaveModule.ɵinj = ɵɵdefineInjector({ factory: function AngularRaveModule_Factory(t) { return new (t || AngularRaveModule)(); }, imports: [[CommonModule]] });\r\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵɵsetNgModuleScope(AngularRaveModule, { declarations: [AngularRaveDirective, AngularRaveComponent], imports: [CommonModule], exports: [AngularRaveDirective, AngularRaveComponent] }); })();\r\n/*@__PURE__*/ (function () { ɵsetClassMetadata(AngularRaveModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                imports: [CommonModule],\r\n                declarations: [AngularRaveDirective, AngularRaveComponent],\r\n                exports: [AngularRaveDirective, AngularRaveComponent],\r\n            }]\r\n    }], null, null); })();\n\n/*\r\n * Public API Surface of angular-rave\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { AngularRaveComponent, AngularRaveDirective, AngularRaveModule, AngularRaveService };\n//# sourceMappingURL=angular-rave.js.map\n","import { Component } from '@angular/core';\r\nimport { RaveOptions, PaymentInstance } from 'angular-rave';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'app';\r\n  paymentInstance: PaymentInstance;\r\n  raveOptions: RaveOptions = {\r\n    customer_email: 'user@ravemail.com',\r\n    customer_phone: '090848484843',\r\n    amount: 3000,\r\n    redirect_url: 'http://localhost:4200',\r\n    currency: 'NGN',\r\n    custom_title: 'Angular rave test payment',\r\n    txref: `${Math.random() * 1000000}`,\r\n  };\r\n\r\n  paymentFailure() {\r\n    console.log('Payment Failed');\r\n    this.paymentInstance.close();\r\n  }\r\n\r\n  paymentSuccess(res) {\r\n    console.log('Payment complete', res);\r\n    this.paymentInstance.close();\r\n  }\r\n\r\n  paymentInit(paymentInstance) {\r\n    this.paymentFailure = paymentInstance;\r\n    console.log(paymentInstance);\r\n    console.log('Payment about to begin', paymentInstance);\r\n  }\r\n}\r\n","<button\r\n  angular-rave\r\n  (init)=\"paymentInit($event)\"\r\n  class=\"btn btn-primary btn-lg\"\r\n  [autoClose]=\"true\"\r\n  [raveOptions]=\"raveOptions\"\r\n  (callback)=\"paymentSuccess($event)\"\r\n  (onclose)=\"paymentFailure()\"\r\n>\r\n  Pay with Rave Directive\r\n</button>\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { AngularRaveModule } from 'angular-rave';\r\n\r\n@NgModule({\r\n  imports: [\r\n    BrowserModule,\r\n    AngularRaveModule.forRoot({\r\n      key: 'FLWPUBK_TEST-ccf7c01dd5d4e69db74608b8c3a09499-X',\r\n      isTest: true,\r\n    }),\r\n  ],\r\n  declarations: [\r\n    AppComponent,\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}